{
  "title": "Chapter 2: Basics Part 1",
  "modules": [
    {
      "module_title": "Overview",
      "content": "This is part 1 of the basics. In this chapter we go over some of the basics of not only Python but programming. Some of the terms we will go over in the following chapters, so don't worry if you are confused at first.<br><br>We go over variables and common data types, operators, and basic I/O."
    },
    {
      "module_title": "Comments",
      "content": "I want to start off with comments in code. Readable code is good code. Once your programs start getting larger and more complex it gets hard to follow along with the logic. Having comments in your code not only helps others trying to read and make sense of your work, but also helps yourself when looking over parts you haven't seen in a while. Do everyone a favor and add meaningful comments to your code. In Python we use ```# Comment``` for one line comments or ```\"\"\"Comment\"\"\"``` for multiple line comments (docstrings)."
    },
    {
      "module_title": "Variables and Data Types",
      "content": "Variables are containers to store information throughout the entirety of your program. Unlike other programs Python doesn't require you to state data types, simply define the variable and use the ```=``` operator to assign its value. To keep standard and readability naming variables requries you to follow rules.<br>These include:<br> - Meaningful names<br>- Consistent Casing (Camel Case, Pascal Case, etc.)<br>- Cannot start with number<br>- More rules can be found here (https://www.w3schools.com/python/gloss_python_variable_names.asp)<br><br>While types aren't specified the basic data types are still used under the hood. The most commonly used data types are: ```int``` ```float``` ```str``` ```bool```. Python doesn't have the ```null``` keyword, rather it uses ```None```. ```int``` refers to common integers, ```float``` is used for floating point number, ```str``` is for sequences of characters, and ```bool``` is used for ```True``` or ```False``` values.<br><br> Type checking can also be useful to avoid errors. The built in ```type()``` method allows you to check the type of a variable. Casting allows you implicitly change the type of a variable (with restrictions) using the built in functions. ```int()``` for int casting, ```float()``` for floats, and ```str()``` for strings.<br><br>Use the code editor to create variables and use the built in functions to see them in action."
    },
    {
      "module_title": "Operators",
      "content": "Basic operators fall into 3 categories: arithmetic, comparison, and logical. There is also the assignment operator, ```=```, used to assign values to variables.<br><br>Arithmetic:<br>- ```+``` addition allows you to add variables.<br>- ```-``` subtractions allows you to subtract variables.<br>- ```*``` star allows you to multiply variables.<br>- ```/``` forward slash allows you to divide variables.<br>- ```//``` double forward slash allows you to divide with integral result (discard remainder).<br>- ```%``` percentage allows you to return the remainder of dividing variables.<br>- ```**``` double star is the built in exponential operator.<br><br>Comparison:<br>- ```==``` checks for equality.<br>- ```!=``` checks for inequality.<br>- ```<``` checks whether left value is smaller than right value.<br>- ```>``` checks whether left value is larger than right value.<br>- ```<=``` checks whether left value is smaller or equal to right value.<br>- ```>=``` checks whether left value is greater or equal to right value.<br><br>Logical:<br>- ```and``` returns ```True``` if both conditions are met.<br>- ```or``` returns ```True``` if at least 1 condition is met.<br>- ```not``` returns opposite bool value.<br><br>There are restrictions with some of these operators, use the code editor to try and find restrictions or unnatural behavior."
    },
    {
      "module_title": "Input",
      "content": "Getting and showing information to the user is very import for applications. Python allows for straightforward ways to read and write information.<br><br>To take input from a user in we can use the ```input()``` function. We store its value in a variable and it takes in a prompt to show to the user.<br><br>```name = input(\"What is your name?\")```<br><br>The users name is now stored in ```name```.<br><br>We may need to read large files of data and we can do that with the built in Python functions ```open()``` and ```read()``` or ```readline()```. It's typically used with the ```with``` and ```as``` keywords to safely close the file after it's being done read.\n```python\nwith open(\"file.txt\", \"r\") as f:\n    data = f.read()\n```\nBelow is a step-by-step explanation of the code:<br><br>```with```:<br>Using the ```with``` statement we open 'file.txt'.<br><br>```open(\"file.txt\", \"r\")```:<br>```open()``` takes 2 arguements the file and the mode. The file is just the path to the file and the mode is a string. The different modes are ```'r'``` (read a file), ```'a'``` (append to a file), ```'w'``` (write to a file), ```'x'``` (create a file). If the file does not exist read throws and error, append and write creates a new file, and create throws an error.<br><br>```as f:```:<br>```as f``` is just a name for the file. It saves the file as a pointer to a file object that the ```open()``` function returns (you can name the file any valid string).<br><br>```data = f.read()```:<br>Notice the indentation and colon to denote that the following code is within the ```with``` statement. We store the content of the file inside of ```data``` using the ```read()``` method on ```f```.<br><br> After the code inside of the ```with``` statement is completed the file is automatically closed. There are other ways to open a file, however this is a safe way to get its contents."
    },
    {
      "module_title": "Output",
      "content": "After we take input from the user or different files and complete operations with them we need a way to output the information. We saw a way earlier on how to output to a text file using ```'w'``` and ```'a'``` as modes in the ```open()``` function. We can also display messages directly in the console using the ```print()``` function.<br><br>The ```print()``` function can be used in many mays to output. Below are some common uses of the ```print()``` function.<br><br>Vanilla output:\n```python\nprint(\"Hello, world!\")\n```\nThe output of this would be ```Hello, world!```<br><br>Variable output:\n```python\nname=\"Bob\"\nage=35\nprint(\"Name: \", name, \"Age: \", age)\n```\nThe output of this would be ```Name: Bob Age: 35```<br><br>Format strings:\n```python\nname=\"Bob\"\nage=35\nprint(f\"Name: {name} Age: {age}\")\n```\nThe output of this would also be ```Name: Bob Age: 35```<br><br>Format strings (f-string) aren't specific to the ```print``` function. You can use f-string's when declaring a string. I like using f-string's because it allows you to directly insert the variables in to the string using ```{}```. Try using f-string's in the code editor."
    }
  ],
  "exercise": "",
  "answer": ""
}

{
  "title": "Chapter 8: Object Oriented Programming",
  "modules": [
    {
      "module_title": "Overview",
      "content": "The last concept we will go over is Object Oriented Programming (OOP). Up until now we have been using the standard data types and functions to create programs and logic. Now we are going to introduce a new idea on how to structure and organize code to be more specialized. Many languages support OOP and many do not, in this chapter we will go over how they are used in Python. There are what's know as 'paradigms' of OOP but we will not go over them explicitly, this is only to understand the basics and get started using them. I recommend understanding these paradigms to write better code."
    },
    {
      "module_title": "What are Objects?",
      "content": "Objects can be anything. We create objects to represent things in our code. An object is simply a defined thing in our code that can have certian properties and actions. Essentially objects can have thier own variables and functions however, these have special names properties and methods. (Methods and functions are the same thing but method is used when refering functions that objects contain)."
    },
    {
      "module_title": "Using Objects",
      "content": "***Class:***<br>To create an object we must first make a blueprint for how it is structured, this is called a ```class```. Objects of the same type will always be the same so classes allow for us to define this structure. We will use the typical example of defining a car class.\n```python\n# Simple car with a color and drive method\nclass Car:\n    def __init__(self, color):\n        self.color = color\n\n    def drive(self):\n        print(f\"The {self.color} car is driving\")\n```\nThere are many things to unpack, let's start from the top down.<br><br>```class Car:```<br>This is our definition of our class. We simply use the ```class``` keyword to denote that this is a class followed by the name. By convention all class names are capitalized. Just like any other code block there is a colon and all of the corresponding code is indented.<br><br>```def __init__(self, color):```<br>If you noticed the syntax looks like a function definition, because it is. However, since we are working with objects this a method not a function (same thing different name). This method is whats called a ```constructor method```. Every class must have a constructor. The constructor is a special method that initializes all of the properties of the objects. Every time we create an object (which we will do later) the constructor is called automatically. ```__init__``` is the special name for Python constructors and is necessary.<br><br>The next thing is the ```self``` parameter. ```self``` is the instance of the object. When we create an object we create a unique instance of that object, every object we create is unique. All of the information initialzed for that particular object is contained within the ```self``` property. When creating an object we don't need to pass is a ```self``` parameter the constructor handles that. (Note: ```self``` is not a keyword it's a naming typical convention, it can be named to whatever).<br><br>Lastly, we have the ```color``` parameter. This is needed when creating our object. Different objects can have different properties so having specific parameters passed in is key to differenciate. All parameters after ```self``` work as regular parameters. And just like regular functions our logic is indented and denoted with a colon.<br><br>```self.color = color```<br>Inside our constructor we initialize our properties. These properties work like regular variables. We create these properties using the ```self``` attribute, followed by the name. If we wanted to also make a property for the model of the car we do ```self.model = \"Camry\"```. All of these properties will be accessable through ```self```, if we need to use or change them anywhere inside of our class we call ```self```. These properties are not accessable outside of the class, they are what's called private. No other class can access these.<br><br>```def drive(self):```<br>This is the drive method. It is initialized like a normal function. We pass ```self``` into it because we use it inside of the definition. The logic is self-explanatory.<br><br>***Creating Objects:***<br>After creating our class for our object we must create an instance of the object. An instance is just a way we can say you can have multiple of the same object. To do this we can create a variable and call the class name an pass in any parameters. You do not need to call the constructor as it will be handled automatically.\n```python\n# Creating 2 instances of Car\ncar1 = Car(\"Red\")\ncar2 = Car(\"Blue\")\n```\n<br>After creating our objects we can run any methods the object contains using ```.```.\n```python\n# Drive method\ncar1.drive()\ncar2.drive()\n```\n<br>Since the properties we initialize in the constructor are private a common way to manipulate and access them is with ```getters``` and ```setters```. Getters are used to access private properties, the common naming convention for getters: ```get_property```. Setters are used to change private properties, the common naming convention for setters: ```set_property```.\n```python\n# New setter and getter for Car\nclass Car:\n    def __init__(self, color):\n        self.color = color\n\n    def get_color(self):\n        # Returns type of whatever is passed in\n        return self.color\n\n    def set_color(self, new):\n        self.color = new\n\n    def drive(self):\n        print(f\"The {self.color} car is driving\")\n\ncar1 = Car(\"Red\")\ncar1.drive()\ncar1.set_color(\"Blue\")\nprint(car1.get_color())\n```\n<br>This is essentially the basics of OOP. Again this isn't a complete guide, usually there are entire classes dedicated just to OOP. Here is a great resources to learn more: https://www.geeksforgeeks.org/python-oops-concepts/"
    }
  ],
  "exercise": "",
  "answer": ""
}

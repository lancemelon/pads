{
    "title": "Chapter 9: Visualizing Data",
    "modules": [
      {
        "module_title": "Overview",
        "content": "In this lesson we will go over a very useful library in Python called Matplotlib. It is used for visualizations using Python to create charts and graphs for a variety of use-cases. It is especially useful in data exploration in the feild of data science and machine learning. We will also go into how it can be used along side other data libraries in Python. In this lesson we will either create lists to use as data or we will use random data, next lesson we will go over how to get real data."
      },
      {
        "module_title": "How to import MatPlotLib",
        "content": "To get started with any library in Python we must first import it into our project. To do this for MatPlotLib we do: <br> `import matplotlib.pyplot as plt` <br><br>To import a library we simply use the `import` keyword. When using MatPlotLib we import the `pyplot` module specifically (hence the .pyplot) to easily use that specific module which contains many different useful visualization tools. Lastly, we use an alias for the module because typing `matplotlib.pyplot` takes to much time. By convention we typically use the alias `plt`, but you can use whatever alias you want.<br><br>The general workflow of creating visualizations is to use the `plot` function then the `show` function to create and display. Below is a simple example of what this would look like:\n```python\n#Simple Syntax for MatPlotLib\nplt.plot([1, 2, 3], [4, 5, 6])\nplt.show()\n```"
      },
      {
        "module_title": "Basic Plot Types",
        "content": "In this section we will go over basic plot types that you can set up quickly to make basic visualizations. This will be less of an explanation of use-cases and details of different plots, but rather a guide on the MatPlotLib syntax and how to write the code. <br><br> **Line Plot**<br>A common plot to use to show continous change over time is a Line Plot. A line plot connects individual data points with lines which makes it ideal to observe changes of continous data such as time. <br><br>In MatPlotLib the line plot is the default plot when using the `plt.plot()` function. Below is a simple demonstration of how to code a line plot:\n```python\n# Simple Syntax for Line Plot with variables x and y\nx = [0, 1, 2, 3]\ny = [0, 1, 4, 9]\nplt.plot(x, y)\nplt.title(\"Line Plot\")\nplt.show()\n```\n<br>**Scatter Plot**<br>A scatter plot displays data points as dots on a coordinate-plane. A scatter plot is especially useful when identifying relalationships between points, for example scatter plots can be used to visualize and detect clusters, outliers, and correlations. <br><br>They are commonly used in dimensionality techniques like PCA to represent points and to visualize ML algorithms like K-nearest neighbor. Below is an example in code:\n```python\n# Simple Scatter Plot\nx = [0, 1, 2, 3]\ny = [0, 1, 4, 9]\nplt.scatter(x, y)\nplt.title(\"Scatter Plot\")\nplt.show()\n```\n<br>**Bar Plot**<br>For data with distinct categories we can use bar charts. They are ideal for comparing values across different categories. Each bar represents a cotegory, and the height is associated with the respective value.<br><br>Bar charts are good for visualizing frequency of labels in a dataset, or counts of predictions an ML model made for each class. Below is an example in code:\n```python\n# Simple Bar Chart\ncategories = ['A', 'B', 'C']\nvalues = [10, 20, 15]\nplt.bar(categories, values)\nplt.title(\"Bar Chart\")\nplt.show()\n```\n<br>**Histogram**<br>A histogram shows the distribution of data by grouping data into bins and displaying how many values fall into each bin. Similar to a bar chart with the bars but rather than representing categorial data it represents continous data showing a distrubution.<br><br>They are very common in exploratory analysis to understand teh spread, central tendency, and shape of data. Below is a simple example of a histogram:\n```python\n# Simple Histogram\nimport numpy as np\ndata = np.random.randn(1000)\nplt.hist(data, bins=30)\nplt.title(\"Simple Histogram\")\nplt.show()\n```\n(We are using the `numpy` library just to create sample data)"
      },
      {
        "module_title": "Customization",
        "content": "MatPlotLib gives you powerful tools to customize your plots to make them clear, informative, and visually appealing. While the default settings work for simple plots, customizing things like labels, titles, colors, line styles, and legends makes your visualizations much more effective especially when sharing your results with others. <br><br>**Titles and Axis Labels**<br>It’s important to add a title to your plot and labels to your x and y axes so that viewers understand what the chart is showing. We previously saw the `title` feature we will add to it with axis labels.\n```python\nimport matplotlib.pyplot as plt\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 15, 25, 30]\nplt.plot(x, y)\nplt.title(\"Title\")\nplt.xlabel(\"X values\")\nplt.ylabels(\"Y values\")\nplt.show()\n```\nThis adds helpful context to your plot, which is especially important in data science and machine learning when visualizing metrics or features.<br><br>**Line Styles, Colors, Markers**<br>You can change how your plot looks by customizing the line color, style (solid, dashed, dotted), and marker (symbols for each data point).\n```python\nplt.plot(x, y, color='green', linestyle='--', marker='o')\nplt.title(\"Line Style\")\nplt.xlabel(\"X Axis\")\nplt.ylabel(\"Y Axis\")\nplt.show()\n```\nThis makes it easier to distinguish different lines in a multi-line plot or emphasize specific data patterns.<br><br>**Adjusting Figure Size**<br>Sometimes you need a bigger or smaller plot—especially when preparing figures for papers or presentations. You can change the figure size using `plt.figure()`.\n```python\nplt.figure(figsize=(8, 4)) # Width = 8 inches, height = 4 inches\nplt.plot(x, y)\nplt.title(\"Wide Plot\")\nplt.show()\n```\n<br>**Adding a Legend**<br>If you have more than one dataset in a plot, a legend tells the viewer which line represents which data.\n```python\ny2 = [5, 15, 10, 20, 25]\nplt.plot(x, y, label=\"Dataset 1\", color='blue')\nplt.plot(x, y2, label=\"Dataset 2\", color='orange')\nplt.title(\"Multiple Lines with Legend\")\nplt.xlabel(\"X Axis\")\nplt.ylabel(\"Y Axis\")\nplt.legend()\nplt.show()\n```\n<br>**Gridlines**<br>Gridlines make it easier to read exact values on a plot. You can turn them on with `plt.grid()`.\n```python\nplt.plot(x, y)\nplt.title(\"Line Plot wiht Grid\")\nplt.grid(True)\nplt.show()\n```\nYou can also customize grid color and style if needed.<br><br>**Setting Axis Ranges**<br>Sometimes you want to control the visible range of your axes, for example to zoom in or focus on a particular section.\n```python\nplt.plot(x, y)\nplt.title(\"Zoomed-In Plot\")\nplt.xlim(2, 5)\nplt.ylim(10, 30)\nplt.show()\n```\nThis is especially helpful when looking at a specific range of predictions or data values."
      }
    ],
    "exercise": "",
    "answer": ""
  }
  
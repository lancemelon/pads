{
  "title": "Chapter 3: Basics Part 2",
  "modules": [
    {
      "module_title": "Overview",
      "content": "This is part 2 of basics. Like previously mentioned in the last chapter, some of the terms will be gone over in following chapters."
    },
    {
      "module_title": "Conditionals",
      "content": "Conditionals are used to run specific blocks of code if a certian condition is met. We denote the start of these blocks like any other code block, using a keyword followed by a colon. The code to run is then indented after the conditional.<br><br>We have 3 conditional statements in Python:<br>-```if```<br>-```else```<br>-```elif```<br><br>```if```:<br>If statements run it's corresponding code if a condition is ```True```. To write an if statement you simply type ```if``` followed by the condition.\n```python\nif 5 > 3:\n    print(\"5 is more than 3\")\n```\nThe output of this would be ```5 is more than 3``` because the condition was true.<br><br> However, if it was changed to:\n ```python\nif 3 > 5:\n    print(\"5 is more than 3\")\n```\nNothing will be printed because the condtion is false.<br><br>```else```:<br>```else``` statements come after ```if``` statements as a default block if the condition was ```false```. You write ```else``` statements after ```if``` statements the same way but with no condition.\n```python\nif 3 > 5:\n    print(\"5 is more than 3\")\nelse:\n    print(\"3 is less than 5\")\n```\nThe output of this would be ```3 is less than 5``` because the initial condition was ```false```. If the condition was changed to ```if 5 > 3``` the ```else``` statement would not run.<br><br>```elif```:<br>To have more robust conditions we can use ```elif``` to denote different conditions (else-if). ```elif``` statements are writtent the same was as ```if``` statements and can be followed by a default ```else``` statement.\n```python\nif 5 > 3:\n    print(\"5 is more than 3\")\nelif 2 < 3:\n    print(\"2 is less than 3\")\nelse:\n    print(\"5 is less than 3\")\n```\nUsing these simple conditionals we can create complex logical expressions with our code. At its core, all code is just a bunch of if else statements.ðŸ¤·"
    },
    {
      "module_title": "Loops",
      "content": "Up until now we have been manually running chunks of code. The power of programming is the ability to automate these manual operations. Loops allow us to scale these operations and compute a lot of these operations.<br><br>There are 2 different loops is Python, ```for-loop``` and ```while-loop```. Loops run their corresponding code blocks for multiple iterations.<br><br>```for```:<br>```for-loop```'s run blocks of code for a specified number of iterations. The syntax is ```for variable in sequence```. We declare a ```variable``` and use the ```in``` keyword to iterate over the ```sequence```. It's common to use the ```range()``` function with ```for-loop```'s. ```range()``` is a function that creates a sequence and requires 1 parameter: the stopping number. If we wanted to create a sequence from 0 to 4 we would use ```range(5)```(the stopping number is not inclusive). The other 2 optional parameters is the starting number (inclusive) and the step-size.<br><br>Below is a step by step example of a for loop:\n```python\nfor i in range(1, 10, 2):\n    print(i)\n```\nRun the code in the editor to see the output.<br><br>In a later chapter we will go over another way to use ```for-loop```'s to iterate over data.<br><br>```while-loop```:<br>Instead of specifying how many times you want your code to iterate, ```while-loop```'s allow you to run your code as long as a conditional results in ```True```. This is mainly used when you don't know how many times a block of code should run, and you want your program to automatically exit the loop. This can also lead to dangerous results because of infinite loops. If the condition always results in ```True``` the loop will run infinitly causing the program to eventually crash. You must ensure your condition has a stopping condition.<br><br>Below is an example of a safe ```while-loop```:\n```python\nx = 10\nwhile x > 0:\n   print(x)\n   x -= 1\n```\nRun the code in the editor to see results.<br><br>Lastly, we will talk about control statements and nested loops. Having no control over your loops while they are running isn't very optimal. Instead of having our loops only run themselves we can manually add control statements inside the loops. The 2 statements we have are ```break``` and ```continue```. These statements are usually coupled with ```if``` statements.<br>-```break``` (allows you to break out of the loop prematurely)<br>-```continue``` (allows you to skip over itterations)<br>There are also other keywords used to control loops but these are the main ones connected to loops specifically.<br><br>Below are some examples of these:\n```python\n# Break inside of a while loop\nx = 1\nwhile x < 5:\n   if x == 3:\n      print(\"x = 3, exiting\")\n      break\n   x += 1\n\n# Continue inside of a for loop\nfor i in range(5):\n   if i == 3:\n      print(\"Skipping 3\")\n      continue\n   print(i)\n```\nRun these in the code editor to see how they work.<br><br>Complexity is what makes programming useful. A single loop is just one layer of complexity, when dealing with more complex programs ```nesting loops``` is a useful method (putting loops inside loops). You write ```nested loops``` the same way your write normal loops, ```just make sure your don't forget the indentation```. We can think about multiplication as a nested loop. Think about ```5 * 2```, the outer loop itterates 5 times and the inner loop will itterate 2 times. Below is an example in code.\n```python\n# 5 * 2 using nested for loops\nx = 5\ny = 2\nproduct = 0\nfor i in range(5):\n   for j in range(1, 3):\n      product += j\n\nprint(product)\n```\nWhy did I use range(1, 3)?"
    }
  ],
  "exercise": "",
  "answer": ""
}
